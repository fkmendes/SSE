package test;

import SSE.SSEUtils;
import org.jtransforms.fft.DoubleFFT_1D;
import org.junit.Test;

import java.util.Arrays;

import static SSE.SSEUtils.*;
import static org.junit.Assert.*;

public class PropagatesQuaSSETest {

    final static double EPSILON = 1e-5;
    final static double EPSILON2 = 1e-15;

    DoubleFFT_1D fftForKern, fftForEandD;
    int nUsefulTraitBins, nXbins, nLeftFlankBins, nRightFlankBins, nDimensionsE, nDimensionsD;
    double dt = 0.01;
    double dx = 0.01; // before I used 0.001
    double drift, diffusion;
    double[] birthRate, deathRate;
    double[] fY;
    double[][] esDs;
    double[][] scratch;

    /*
     * Propagates esDs in time. These are the analytical solutions
     * for the birth-death model.
     */
    @Test
    public void testPropagateTimeOneChQuaSSETest() {

        esDs = new double[2][96];
        scratch = new double[2][96];
        birthRate = new double[48];
        deathRate = new double[48];
        nDimensionsE = nDimensionsD = 1;

        double[] randNumbers = new double[] { 8.50976807665641, 10.103792974434, 9.08976088347418, 11.847721337896, 8.51254745547751, 9.91650581983555, 8.95019918832521, 9.30609468137578, 11.0775496365384, 10.7639029400606, 10.9164931483932, 9.83064984974005, 11.7045125626528, 11.3382431919839, 8.94185500956388, 7.30298759647754, 11.1167065386435, 9.76891399488789, 9.76676261926709, 9.10540040702707, 8.93655752085786, 10.2580116547857, 10.2552822093573, 8.85921172559191, 11.0314684537514, 10.8738197102994, 10.4638936963999, 9.68617874031991, 8.35885856359494, 10.8426829704597, 7.66894489549493, 8.23694434625264, 11.1384877145132, 9.40550089155345, 9.97880581995152, 11.4504630996011, 10.3369599590198, 10.3149165707367, 10.3046840297378, 8.32290274946024, 9.46368095367558, 8.81487516662079, 9.83971439912364, 11.886850507066, 11.6196319895886, 10.7171936473579, 9.00153746682918, 9.44772548737688 };
        for (int i=0; i<esDs[0].length/2; i++) {
            esDs[0][i] = 0.0001;
            esDs[1][i] = randNumbers[i];
            birthRate[i] = 1.0;
            deathRate[i] = 0.5;
        }
        nUsefulTraitBins = 48 - 4 - 4;

        // propagating in place, result left in esDs
        propagateEandDinTQuaSSEInPlace(esDs, scratch, birthRate, deathRate, dt, nUsefulTraitBins, nDimensionsD);

        // System.out.println(Arrays.toString(esDs[0]));
        // System.out.println(Arrays.toString(esDs[1]));

        double[] expectedEs = new double[] { 0.005061285, 0.005061285, 0.005061285, 0.005061285, 0.005061285, 0.005061285, 0.005061285, 0.005061285, 0.005061285, 0.005061285 };
        double[] expectedDs = new double[] { 8.383508, 9.953882, 8.954895, 11.671936, 8.386246, 9.769374, 8.817404, 9.168019, 10.913191, 10.604198 };
        assertArrayEquals(expectedEs, Arrays.copyOfRange(esDs[0], 0, 10), EPSILON);
        assertArrayEquals(expectedDs, Arrays.copyOfRange(esDs[1], 0, 10), EPSILON);
    }

    /*
     * Makes Normal kernel, then does FFT on kernel, and inverse FFT on the FFT.
     */
    @Test
    public void testMakeNormalKernInPlaceAndFftAndIfft() {

        drift = 0.0;
        diffusion = 0.001;
        nLeftFlankBins = nRightFlankBins = 4;
        nXbins = 48;

        double[] fY = new double[nXbins];

        double[] fftFY = new double[nXbins * 2];
        double[] realFftFy = new double[nXbins * 2];

        double[] ifftFY = new double[nXbins * 2];
        double[] realIfftFy = new double[nXbins * 2];

        // prepare fY
        SSEUtils.makeNormalKernelInPlace(fY, dt * drift, Math.sqrt(dt * diffusion), nXbins, nLeftFlankBins, nRightFlankBins, dx, dt); // normalizes inside already
        // System.out.println("fY = " + Arrays.toString(fY));

        // fft
        for (int i=0; i<fY.length; i++) {
            fftFY[i] = fY[i];
        }
        fftForKern = new DoubleFFT_1D(nXbins);
        fftForKern.realForwardFull(fftFY);
        everyOtherInPlace(fftFY, realFftFy, nXbins, 0, 0, 1.0);
        // System.out.println("fft fY = " + Arrays.toString(realFftFy));

        // ifft
        for (int i=0; i<fftFY.length; i++) {
            ifftFY[i] = fftFY[i];
        }
        fftForKern.complexInverse(ifftFY, false);
        everyOtherInPlace(ifftFY, realIfftFy, nXbins, 0, 0, 1.0);
        // System.out.println("ifft fY =" + Arrays.toString(realIfftFy));

        double[] expectedFy = new double[] { 0.986703287028858, 0.00664835445182386, 2.03374705433156e-09, 2.82445649260927e-20, 1.78085279698565e-35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.78085279698565e-35, 2.82445649260927e-20, 2.03374705433156e-09, 0.00664835445182386 };
        double[] expectedFftFY = new double[] { 1, 0.999886244673461, 0.999546925086093, 0.998987847110852, 0.998218576759891, 0.997252276505192, 0.996105480062091, 0.994797809489411, 0.993351639446935, 0.991791714355113 };
        double[] expectedIfftFY = new double[] { 47.3617577773852, 0.319121013687545, 9.76198587343688e-08, 7.45931094670027e-17, -4.44089209850063e-16, 1.51614216742138e-16, 4.05992386804242e-16, -1.43599463769065e-16, -4.44089209850063e-16, -5.17654502592123e-16 };

        assertArrayEquals(expectedFy, fY, EPSILON);
        assertArrayEquals(expectedFftFY, Arrays.copyOfRange(realFftFy, 0, 10), EPSILON);
        assertArrayEquals(expectedIfftFY, Arrays.copyOfRange(realIfftFy, 0, 10), EPSILON);
    }

    /*
     * Makes Normal kernel, FFTs it, then convolves with E's and D's.
     */
    @Test
    public void testConvolve() {

        nDimensionsE = nDimensionsD = 1;
        nLeftFlankBins = nRightFlankBins = 4;
        nXbins = 48;
        drift = 0.0;
        diffusion = 0.001;

        // number of bins must be multiple of 4
        fftForKern = new DoubleFFT_1D(nXbins);
        fftForEandD = new DoubleFFT_1D(nXbins);

        fY = new double[nXbins * 2];
        SSEUtils.makeNormalKernelInPlace(fY, (dt * drift), Math.sqrt(dt * diffusion), nXbins, nLeftFlankBins, nRightFlankBins, dx, dt); // normalizes inside already
        fftForKern.realForwardFull(fY); // first FFT the Normal kernel

        // preparing input
        esDs = new double[2][nXbins * 2];
        scratch = new double[2][nXbins * 2];
        double[] initialValues = new double[] { 0.0058389385158292, 0.0122380386022755, 0.0246443833694604, 0.0476817640292969, 0.0886369682387602, 0.158309031659599, 0.271659384673712, 0.447890605896858, 0.709491856924629, 1.07981933026376, 1.57900316601788, 2.21841669358911, 2.9945493127149, 3.88372109966426, 4.83941449038287, 5.79383105522965, 6.66449205783599, 7.36540280606647, 7.82085387950912, 7.97884560802865, 7.82085387950912, 7.36540280606647, 6.66449205783599, 5.79383105522965, 4.83941449038287, 3.88372109966426, 2.9945493127149, 2.21841669358911, 1.57900316601788, 1.07981933026376, 0.709491856924629, 0.447890605896858, 0.271659384673712, 0.158309031659599, 0.08863696823876, 0.0476817640292968, 0.0246443833694604, 0.0122380386022755, 0.0058389385158292, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        for (int i=0; i<esDs[0].length/2; i++) {
            esDs[0][i] = scratch[0][i] = 0.0;
            esDs[1][i] = scratch[1][i] = initialValues[i];
        }

        SSEUtils.convolveInPlace(scratch, fY, 1, 1, fftForEandD);
        double[] unnormalizedDs = new double[scratch[1].length];
        for (int i=0, j=0; i<scratch[1].length; i+=2, j++) {
            unnormalizedDs[j] = scratch[1][i];
        }

        everyOtherInPlace(scratch[0], esDs[0], nXbins, 0, 0, 1.0/nXbins); // E's: grabbing real part and scaling by 1/nXbins
        everyOtherInPlace(scratch[1], esDs[1], nXbins, 0, 0, 1.0/nXbins); // D's: grabbing real part and scaling by 1/nXbins

        double[] expectedDsUnnormalized = new double[] { 0.280447809353859, 0.58934289318654, 1.18632299309589, 2.29444263475988, 4.26373864030165, 7.61277219718136, 13.0597170956171, 21.5259924869188, 34.090305996801, 51.8724486751153, 75.8369022635638, 106.527631278782, 143.774440226047, 186.439841249409, 232.29148807448, 278.077162458051, 319.841447837597, 353.46100325742, 375.306060575871, 382.883752104488, 375.306060575871, 353.46100325742, 319.841447837597, 278.077162458051, 232.29148807448, 186.439841249409, 143.774440226047, 106.527631278782, 75.8369022635638, 51.8724486751154, 34.090305996801, 21.5259924869189, 13.0597170956171, 7.61277219718137, 4.26373864030163, 2.29444263475987, 1.18632299309587, 0.589342893186554, 0.280447809353873, 0.00186332917266441, 5.70054226045613e-10, 0, 2.8421709430404e-14, 0, 5.6843418860808e-14, 0, 5.70025804336183e-10, 0.00186332917272125 };
        double[] expectedEs = new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 , 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 , 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
        double[] expectedDs = new double[] { 0.00584266269487207, 0.0122779769413863, 0.0247150623561643, 0.0478008882241642, 0.0888278883396176, 0.158599420774612, 0.272077439492023, 0.448458176810809, 0.710214708266689, 1.0806760140649, 1.57993546382425, 2.21932565164128, 2.99530083804266, 3.88416335936269, 4.83940600155166, 5.79327421787606, 6.66336349661661, 7.36377090119626, 7.81887626199731, 7.97674483551017, 7.81887626199731, 7.36377090119626, 6.66336349661661, 5.79327421787606, 4.83940600155166, 3.88416335936269, 2.99530083804266, 2.21932565164129, 1.57993546382425, 1.0806760140649, 0.710214708266689, 0.44845817681081, 0.272077439492023, 0.158599420774612, 0.0888278883396172, 0.0478008882241639, 0.024715062356164, 0.0122779769413865, 0.00584266269487236, 3.88193577638418e-05, 1.18761297092836e-11, 0, 5.9211894646675e-16, 0, 1.1842378929335e-15, 0, 1.18755375903371e-11, 3.88193577650261e-05 };

        assertArrayEquals(expectedDsUnnormalized, Arrays.copyOfRange(unnormalizedDs, 0, 48), EPSILON); // comes straight out of convolve
        assertArrayEquals(expectedEs, Arrays.copyOfRange(esDs[0],0, 48), EPSILON);
        assertArrayEquals(expectedDs, Arrays.copyOfRange(esDs[1], 0, 48), EPSILON);
    }

    /*
     * Calls convolve function, which makes Normal kernel, FFTs it, convolves,
     * and iFFTs it. Then reorganize all elements of esDs by bookkeeping all
     * flanking bins, etc.
     *
     * Using 48 quantitative trait bins, dx = 0.01, diffusion = 0.001.
     */
    @Test
    public void testPropagateChOneCh48QuaSSETest() {

        nDimensionsE = nDimensionsD = 1;
        nLeftFlankBins = nRightFlankBins = 4;
        nXbins = 48;
        drift = 0.0;
        diffusion = 0.001;

        esDs = new double[2][nXbins * 2];
        scratch = new double[2][nXbins * 2];

        // number of bins must be multiple of 4
        fftForEandD = new DoubleFFT_1D(nXbins);

        fY = new double[nXbins * 2];
        SSEUtils.makeNormalKernelInPlace(fY, (dt * drift), Math.sqrt(dt * diffusion), nXbins, nLeftFlankBins, nRightFlankBins, dx, dt); // normalizes inside already
        fftForEandD.realForwardFull(fY); // first FFT the Normal kernel

        esDs = new double[2][nXbins * 2];
        scratch = new double[2][nXbins * 2];
        double[] initialValues = new double[] { 0.0058389385158292, 0.0122380386022755, 0.0246443833694604, 0.0476817640292969, 0.0886369682387602, 0.158309031659599, 0.271659384673712, 0.447890605896858, 0.709491856924629, 1.07981933026376, 1.57900316601788, 2.21841669358911, 2.9945493127149, 3.88372109966426, 4.83941449038287, 5.79383105522965, 6.66449205783599, 7.36540280606647, 7.82085387950912, 7.97884560802865, 7.82085387950912, 7.36540280606647, 6.66449205783599, 5.79383105522965, 4.83941449038287, 3.88372109966426, 2.9945493127149, 2.21841669358911, 1.57900316601788, 1.07981933026376, 0.709491856924629, 0.447890605896858, 0.271659384673712, 0.158309031659599, 0.08863696823876, 0.0476817640292968, 0.0246443833694604, 0.0122380386022755, 0.0058389385158292, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        for (int i=0; i<esDs[0].length/2; i++) {
            esDs[0][i] = scratch[0][i] = 0.0;
            esDs[1][i] = scratch[1][i] = initialValues[i];
        }

        propagateEandDinXQuaLike(esDs, scratch, fY, nXbins, nLeftFlankBins, nRightFlankBins, nDimensionsE, nDimensionsD, fftForEandD);

        double[] expectedEs = new double[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        double[] expectedDs = new double[] { 0.0058389385158292, 0.0122380386022755, 0.0246443833694604, 0.0476817640292969, 0.0888278883396176, 0.158599420774612, 0.272077439492023, 0.448458176810809, 0.710214708266689, 1.0806760140649, 1.57993546382425, 2.21932565164128, 2.99530083804266, 3.88416335936269, 4.83940600155166, 5.79327421787606, 6.66336349661661, 7.36377090119626, 7.81887626199731, 7.97674483551017, 7.81887626199731, 7.36377090119626, 6.66336349661661, 5.79327421787606, 4.83940600155166, 3.88416335936269, 2.99530083804266, 2.21932565164129, 1.57993546382425, 1.0806760140649, 0.710214708266689, 0.44845817681081, 0.272077439492023, 0.158599420774612, 0.0888278883396172, 0.0476817640292968, 0.0246443833694604, 0.0122380386022755, 0.0058389385158292, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

        assertArrayEquals(expectedEs, Arrays.copyOfRange(esDs[0], 0, nXbins), EPSILON);
        assertArrayEquals(expectedDs, Arrays.copyOfRange(esDs[1], 0, nXbins), EPSILON);
    }

    /*
     * Calls convolve function, which makes Normal kernel, FFTs it, convolves,
     * and iFFTs it. Then reorganize all elements of esDs by bookkeeping all
     * flanking bins, etc.
     *
     * Using 1024 quantitative trait bins, dx = 0.01, diffusion = 0.001.
     */
    @Test
    public void testPropagateChOneCh1024QuaSSETest() {

        nDimensionsE = nDimensionsD = 1;
        nLeftFlankBins = nRightFlankBins = 4;
        nXbins = 1024;
        drift = 0.0;
        diffusion = 0.001;

        esDs = new double[2][nXbins * 2];
        scratch = new double[2][nXbins * 2];

        // number of bins must be multiple of 4
        fftForEandD = new DoubleFFT_1D(nXbins);

        fY = new double[nXbins * 2];
        SSEUtils.makeNormalKernelInPlace(fY, (dt * drift), Math.sqrt(dt * diffusion), nXbins, nLeftFlankBins, nRightFlankBins, dx, dt); // normalizes inside already
        fftForEandD.realForwardFull(fY); // first FFT the Normal kernel

        esDs = new double[2][nXbins * 2];
        scratch = new double[2][nXbins * 2];

        String initialValuesStr = "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.07356011714376e-320, 1.07646593078779e-316, 2.19444210413816e-313, 4.29809786779161e-310, 8.0882896186969e-307, 1.46239706910102e-303, 2.54040022766109e-300, 4.24001310304921e-297, 6.79924162752444e-294, 1.04756739392715e-290, 1.55071393737006e-287, 2.20551303475434e-284, 3.01380943524079e-281, 3.95685529630673e-278, 4.99128960231452e-275, 6.04927865726296e-272, 7.0440532888614e-269, 7.88079255427205e-266, 8.47120866306929e-263, 8.74881199193118e-260, 8.68122493117834e-257, 8.27639395486764e-254, 7.58105280018574e-251, 6.67184746525239e-248, 5.64145225220522e-245, 4.58314867209543e-242, 3.5773809909959e-239, 2.68283933469824e-236, 1.93309125470737e-233, 1.33825312975345e-230, 8.90127872151017e-228, 5.68846058458759e-225, 3.49273251351755e-222, 2.06045968516333e-219, 1.16786094930117e-216, 6.35984267922332e-214, 3.32759014587752e-211, 1.67279032117111e-208, 8.0794426979051e-206, 3.74929423451527e-203, 1.67165196678454e-200, 7.16094641547923e-198, 2.9472922697571e-195, 1.16547834021394e-192, 4.42805931067358e-190, 1.61640755832608e-187, 5.66913157281163e-185, 1.91033890838957e-182, 6.18489778402691e-180, 1.92390158616881e-177, 5.74991466774607e-175, 1.65108019165656e-172, 4.55515495747242e-170, 1.20744223918252e-167, 3.07508973936726e-165, 7.52449650211712e-163, 1.76898974729278e-160, 3.99577851833656e-158, 8.67172946143426e-156, 1.8081658128976e-153, 3.62242170861341e-151, 6.97249132581543e-149, 1.28945199427945e-146, 2.2911345498459e-144, 3.91132795004428e-142, 6.41543470441782e-140, 1.01101166750794e-137, 1.53078594728388e-135, 2.22690139125134e-133, 3.11254563200686e-131, 4.17983067181575e-129, 5.39299317374918e-127, 6.68542888358834e-125, 7.96263661950535e-123, 9.11197964822431e-121, 1.00183639776346e-118, 1.0583007202168e-116, 1.07411207300394e-114, 1.04741388109478e-112, 9.8133044576004e-111, 8.83365515851868e-109, 7.64000830876149e-107, 6.34856310565053e-105, 5.06856793303167e-103, 3.88797374111874e-101, 2.86542862629871e-99, 2.02900953617604e-97, 1.38040588402555e-95, 9.02314083909614e-94, 5.66678703028705e-92, 3.41935559160492e-90, 1.98234784757337e-88, 1.10418967243195e-86, 5.90929564931781e-85, 3.03847716959186e-83, 1.50108213729065e-81, 7.12493910800289e-80, 3.249272073547e-78, 1.42370240784759e-76, 5.99350099634455e-75, 2.42420958981576e-73, 9.42080400617952e-72, 3.51749908518976e-70, 1.26185147112051e-68, 4.34921326859857e-67, 1.44026163054372e-65, 4.58247704739833e-64, 1.40083642686346e-62, 4.11436460605744e-61, 1.16103776130575e-59, 3.14787975955296e-58, 8.20008107166511e-57, 2.05232614558392e-55, 4.93517810313117e-54, 1.14021697818816e-52, 2.53104809320918e-51, 5.39810728877691e-50, 1.10614190996888e-48, 2.17775191065533e-47, 4.11940204481734e-46, 7.48666115977061e-45, 1.30728535506374e-43, 2.19321311877783e-42, 3.53524482050667e-41, 5.47502838470966e-40, 8.14669535505585e-39, 1.16467511994726e-37, 1.59976555140121e-36, 2.11123270049027e-35, 2.67697359850864e-34, 3.26122146967924e-33, 3.81719826927329e-32, 4.29276747132557e-31, 4.63829355451241e-30, 4.81512226367853e-29, 4.80269080001678e-28, 4.60246141769576e-27, 4.23763850701887e-26, 3.74874480468359e-25, 3.18622226540176e-24, 2.60192323984759e-23, 2.0414611188613e-22, 1.53891972534128e-21, 1.1146000045441e-20, 7.75622386349327e-20, 5.18572940220102e-19, 3.33117606475986e-18, 2.05595471433372e-17, 1.21915162591241e-16, 6.94592549713167e-16, 3.80216307581598e-15, 1.99967574969938e-14, 1.01045421670732e-13, 4.90571057139242e-13, 2.28831298036031e-12, 1.02555072735932e-11, 4.41597992627408e-11, 1.82694408167278e-10, 7.26192300358372e-10, 2.7733599883306e-09, 1.01762805632897e-08, 3.58756781592795e-08, 1.21517656996468e-07, 3.95463928124892e-07, 1.23652410003313e-06, 3.7147236891104e-06, 1.07220706893955e-05, 2.9734390294686e-05, 7.92259818206398e-05, 0.000202817041309727, 0.000498849425801082, 0.0011788613551308, 0.00267660451529767, 0.00583893851582903, 0.0122380386022749, 0.0246443833694605, 0.0476817640292964, 0.0886369682387583, 0.158309031659594, 0.271659384673714, 0.447890605896856, 0.709491856924619, 1.07981933026374, 1.57900316601789, 2.21841669358911, 2.99454931271487, 3.88372109966421, 4.83941449038288, 5.79383105522965, 6.66449205783597, 7.36540280606644, 7.82085387950912, 7.97884560802865, 7.82085387950912, 7.36540280606649, 6.66449205783597, 5.79383105522965, 4.83941449038288, 3.8837210996643, 2.99454931271495, 2.21841669358911, 1.57900316601789, 1.07981933026378, 0.709491856924646, 0.447890605896856, 0.271659384673714, 0.158309031659602, 0.088636968238763, 0.0476817640292964, 0.0246443833694605, 0.0122380386022757, 0.00583893851582942, 0.00267660451529767, 0.0011788613551308, 0.000498849425801082, 0.000202817041309743, 7.92259818206398e-05, 2.9734390294686e-05, 1.07220706893955e-05, 3.71472368911076e-06, 1.23652410003313e-06, 3.95463928124892e-07, 1.21517656996468e-07, 3.58756781592834e-08, 1.01762805632909e-08, 2.7733599883306e-09, 7.26192300358372e-10, 1.82694408167301e-10, 4.41597992627465e-11, 1.02555072735932e-11, 2.28831298036031e-12, 4.9057105713931e-13, 1.01045421670746e-13, 1.99967574969938e-14, 3.80216307581598e-15, 6.94592549713273e-16, 1.2191516259126e-16, 2.05595471433372e-17, 3.33117606475986e-18, 5.18572940220102e-19, 7.7562238634946e-20, 1.1146000045441e-20, 1.53891972534128e-21, 2.0414611188613e-22, 2.60192323984807e-23, 3.18622226540176e-24, 3.74874480468359e-25, 4.23763850701887e-26, 4.60246141769668e-27, 4.80269080001775e-28, 4.81512226367853e-29, 4.63829355451241e-30, 4.29276747132649e-31, 3.81719826927412e-32, 3.26122146967924e-33, 2.67697359850864e-34, 2.11123270049075e-35, 1.59976555140158e-36, 1.16467511994726e-37, 8.14669535505585e-39, 5.47502838471098e-40, 3.53524482050753e-41, 2.19321311877783e-42, 1.30728535506374e-43, 7.48666115977061e-45, 4.11940204481841e-46, 2.17775191065533e-47, 1.10614190996888e-48, 5.39810728877691e-50, 2.53104809320987e-51, 1.14021697818816e-52, 4.93517810313117e-54, 2.05232614558392e-55, 8.20008107166747e-57, 3.14787975955388e-58, 1.16103776130575e-59, 4.11436460605744e-61, 1.40083642686389e-62, 4.58247704739973e-64, 1.44026163054372e-65, 4.34921326859857e-67, 1.26185147112091e-68, 3.51749908519088e-70, 9.42080400617952e-72, 2.42420958981576e-73, 5.99350099634653e-75, 1.42370240784806e-76, 3.249272073547e-78, 7.12493910800289e-80, 1.50108213729117e-81, 3.03847716959291e-83, 5.90929564931781e-85, 1.10418967243195e-86, 1.98234784757337e-88, 3.41935559160616e-90, 5.66678703028705e-92, 9.02314083909614e-94, 1.38040588402555e-95, 2.0290095361768e-97, 2.86542862629871e-99, 3.88797374111874e-101, 5.06856793303245e-103, 6.34856310565152e-105, 7.64000830876451e-107, 8.83365515851868e-109, 9.81330445760197e-111, 1.04741388109495e-112, 1.07411207300438e-114, 1.0583007202168e-116, 1.00183639776362e-118, 9.11197964822584e-121, 7.96263661950872e-123, 6.68542888358834e-125, 5.39299317375011e-127, 4.17983067181647e-129, 3.11254563200822e-131, 2.22690139125134e-133, 1.53078594728388e-135, 1.01101166750812e-137, 6.41543470441898e-140, 3.91132795004428e-142, 2.2911345498459e-144, 1.28945199427969e-146, 6.97249132581673e-149, 3.62242170861341e-151, 1.8081658128976e-153, 8.67172946143591e-156, 3.99577851833733e-158, 1.76898974729363e-160, 7.52449650211712e-163, 3.07508973936786e-165, 1.20744223918276e-167, 4.55515495747468e-170, 1.65108019165656e-172, 5.74991466774723e-175, 1.9239015861692e-177, 6.18489778403008e-180, 1.91033890838957e-182, 5.66913157281281e-185, 1.61640755832642e-187, 4.4280593106759e-190, 1.16547834021394e-192, 2.9472922697571e-195, 7.16094641548077e-198, 1.67165196678491e-200, 3.74929423451527e-203, 8.0794426979051e-206, 1.67279032117148e-208, 3.32759014587826e-211, 6.35984267922332e-214, 1.16786094930117e-216, 2.0604596851638e-219, 3.49273251351835e-222, 5.68846058459019e-225, 8.90127872151017e-228, 1.33825312975376e-230, 1.93309125470782e-233, 2.68283933470013e-236, 3.5773809909959e-239, 4.58314867209652e-242, 5.64145225220657e-245, 6.67184746525559e-248, 7.58105280018574e-251, 8.27639395486965e-254, 8.68122493118046e-257, 8.74881199193764e-260, 8.47120866306929e-263, 7.88079255427205e-266, 7.04405328886316e-269, 6.04927865726448e-272, 4.99128960231452e-275, 3.95685529630673e-278, 3.01380943524156e-281, 2.20551303475491e-284, 1.55071393737006e-287, 1.04756739392715e-290, 6.79924162752622e-294, 4.24001310305033e-297, 2.54040022766244e-300, 1.46239706910102e-303, 8.08828961869907e-307, 4.2980978677928e-310, 2.19444210413816e-313, 1.07646593078779e-316, 5.07356011714376e-320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0";
        String[] initialValuesStrArray = initialValuesStr.split(", ");
        double[] initialValues = new double[initialValuesStrArray.length];
        for (int i=0; i<initialValues.length; i++) {
            initialValues[i] = Double.parseDouble(initialValuesStrArray[i]); // D's
        } // getting initial values

        for (int i=0; i<esDs[0].length/2; i++) {
            esDs[0][i] = scratch[0][i] = 0.0;
            esDs[1][i] = scratch[1][i] = initialValues[i];

        }

        propagateEandDinXQuaLike(esDs, scratch, fY, nXbins, nLeftFlankBins, nRightFlankBins, nDimensionsE, nDimensionsD, fftForEandD);

        double[] expectedEs = new double[2048];
        double[] expectedDsFirst48 = new double[] { 0, 0, 0, 0, 1.11022302462516e-16, 0, 0, 0, 2.77555756156289e-17, 2.77555756156289e-17, 0, 8.32667268468867e-17, 0, 1.04083408558608e-16, 5.89805981832114e-17, 0, 0, 4.99275100429575e-17, 1.74936020530536e-16, 0, 5.47996435555642e-17, 1.64060117487791e-16, 2.55997708857483e-16, 0, 8.5609964086127e-17, 9.49329645689794e-17, 2.91487168428854e-16, 3.34092533592135e-17, 0, 2.19845474956207e-16, 3.57227590802606e-16, 3.37917798902023e-16, 0, 4.14102761209603e-17, 0, 0, 0, 0, 0, 0, 0, 3.49655200626575e-17, 2.86229373536173e-17, 0, 0, 0, 1.55257751099924e-16, 0 };
        double[] expectedDsLast48 = new double[] { 0, 0, 0, 0, 0, 0, 7.52487427515263e-17, 0, 0, 0, 1.55620691069343e-16, 1.14818872876954e-17, 0, 0, 1.58130728038333e-16, 1.0696554404076e-16, 0, 1.57854754116206e-16, 1.40605775178319e-16, 0, 0, 0, 0, 0, 0, 1.04083408558608e-16, 1.31838984174237e-16, 1.17961196366423e-16, 8.32667268468867e-17, 5.55111512312578e-17, 5.55111512312578e-17, 1.11022302462516e-16, 1.11022302462516e-16, 1.11022302462516e-16, 1.11022302462516e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

        assertArrayEquals(expectedEs, esDs[0], EPSILON2);
        assertArrayEquals(expectedDsFirst48, Arrays.copyOfRange(esDs[1], 0, 48), EPSILON2);
        assertArrayEquals(expectedDsLast48, Arrays.copyOfRange(esDs[1], 976, 1024), EPSILON2);
    }

    /*
     * Calls convolve function, which makes Normal kernel, FFTs it, convolves,
     * and iFFTs it. Then reorganize all elements of esDs by bookkeeping all
     * flanking bins, etc.
     *
     * Using 4096 quantitative trait bins, dx = 0.01, diffusion = 0.001.
     */
    @Test
    public void testPropagateChOneCh4096QuaSSETest() {

        nDimensionsE = nDimensionsD = 1;
        nLeftFlankBins = nRightFlankBins = 4;
        nXbins = 4096;
        drift = 0.0;
        diffusion = 0.001;

        esDs = new double[2][nXbins * 2];
        scratch = new double[2][nXbins * 2];

        // number of bins must be multiple of 4
        fftForEandD = new DoubleFFT_1D(nXbins);

        fY = new double[nXbins * 2];
        SSEUtils.makeNormalKernelInPlace(fY, (dt * drift), Math.sqrt(dt * diffusion), nXbins, nLeftFlankBins, nRightFlankBins, dx, dt); // normalizes inside already
        fftForEandD.realForwardFull(fY); // first FFT the Normal kernel

        esDs = new double[2][nXbins * 2];
        scratch = new double[2][nXbins * 2];

        String initialValuesStre-320, 1.07646593078779e-316, 2.19444210413816e-313, 4.29809786778964e-310, 8.08828961870339e-307, 1.46239706909986e-303, 2.54040022766244e-300, 4.2400131030559e-297, 6.79924162752622e-294, 1.04756739392852e-290, 1.55071393737006e-287, 2.20551303475604e-284, 3.01380943523925e-281, 3.95685529630874e-278, 4.99128960232336e-275, 6.04927865726448e-272, 7.04405328887197e-269, 7.88079255427205e-266, 8.47120866307976e-263, 8.74881199193118e-260, 8.68122493118471e-257, 8.27639395486362e-254, 7.5810528001894e-251, 6.6718474652636e-248, 5.64145225220657e-245, 4.58314867210195e-242, 3.5773809909959e-239, 2.68283933470139e-236, 1.93309125470647e-233, 1.33825312975438e-230, 8.90127872150402e-228, 5.68846058459019e-225, 3.49273251352232e-222, 2.0604596851638e-219, 1.16786094930248e-216, 6.35984267922332e-214, 3.3275901458801e-211, 1.67279032117056e-208, 8.07944269790951e-206, 3.74929423452139e-203, 1.67165196678491e-200, 7.16094641548845e-198, 2.9472922697571e-195, 1.16547834021517e-192, 4.42805931067358e-190, 1.61640755832726e-187, 5.66913157280987e-185, 1.91033890839055e-182, 6.18489778403641e-180, 1.9239015861692e-177, 5.74991466775303e-175, 1.65108019165656e-172, 4.55515495747695e-170, 1.20744223918216e-167, 3.07508973936937e-165, 7.52449650211346e-163, 1.76898974729363e-160, 3.99577851834116e-158, 8.67172946143591e-156, 1.80816581289931e-153, 3.62242170861341e-151, 6.97249132581997e-149, 1.28945199427909e-146, 2.29113454984695e-144, 3.91132795004961e-142, 6.41543470441898e-140, 1.01101166750903e-137, 1.53078594728388e-135, 2.2269013912533e-133, 3.11254563200686e-131, 4.17983067181829e-129, 5.39299317374779e-127, 6.6854288835912e-125, 7.96263661951545e-123, 9.11197964822584e-121, 1.00183639776446e-118, 1.0583007202168e-116, 1.07411207300482e-114, 1.04741388109452e-112, 9.81330445760591e-111, 8.83365515851516e-109, 7.64000830876451e-107, 6.34856310565648e-105, 5.06856793303245e-103, 3.88797374112173e-101, 2.86542862629871e-99, 2.02900953617757e-97, 1.38040588402503e-95, 9.02314083909948e-94, 5.66678703029327e-92, 3.41935559160616e-90, 1.98234784757479e-88, 1.10418967243195e-86, 5.90929564932197e-85, 3.03847716959186e-83, 1.50108213729168e-81, 7.12493910800046e-80, 3.24927207354809e-78, 1.42370240784901e-76, 5.99350099634653e-75, 2.42420958981735e-73, 9.42080400617952e-72, 3.51749908519201e-70, 1.26185147112051e-68, 4.34921326859992e-67, 1.44026163054328e-65, 4.58247704739973e-64, 1.40083642686473e-62, 4.11436460605744e-61, 1.16103776130644e-59, 3.14787975955296e-58, 8.20008107166983e-57, 2.05232614558334e-55, 4.93517810313255e-54, 1.14021697818911e-52, 2.53104809320987e-51, 5.39810728877982e-50, 1.10614190996888e-48, 2.17775191065647e-47, 4.11940204481734e-46, 7.48666115977252e-45, 1.30728535506341e-43, 2.19321311877838e-42, 3.53524482050927e-41, 5.47502838471098e-40, 8.14669535505973e-39, 1.16467511994726e-37, 1.59976555140195e-36, 2.11123270049027e-35, 2.67697359850923e-34, 3.26122146967852e-33, 3.81719826927412e-32, 4.29276747132832e-31, 4.63829355451241e-30, 4.81512226368051e-29, 4.80269080001678e-28, 4.60246141769759e-27, 4.23763850701804e-26, 3.74874480468431e-25, 3.18622226540356e-24, 2.60192323984807e-23, 2.04146111886204e-22, 1.53891972534128e-21, 1.11460000454449e-20, 7.75622386349327e-20, 5.18572940220188e-19, 3.33117606475931e-18, 2.05595471433405e-17, 1.21915162591298e-16, 6.94592549713273e-16, 3.80216307581711e-15, 1.99967574969938e-14, 1.01045421670761e-13, 4.90571057139242e-13, 2.28831298036062e-12, 1.02555072735918e-11, 4.41597992627465e-11, 1.82694408167346e-10, 7.26192300358372e-10, 2.77335998833125e-09, 1.01762805632897e-08, 3.58756781592874e-08, 1.21517656996455e-07, 3.95463928124933e-07, 1.2365241000335e-06, 3.71472368911076e-06, 1.07220706893975e-05, 2.9734390294686e-05, 7.92259818206533e-05, 0.000202817041309727, 0.000498849425801121, 0.00117886135513071, 0.00267660451529786, 0.00583893851583021, 0.0122380386022757, 0.0246443833694635, 0.0476817640292964, 0.0886369682387677, 0.158309031659594, 0.271659384673726, 0.447890605896837, 0.709491856924646, 1.07981933026385, 1.57900316601789, 2.21841669358923, 2.99454931271487, 3.88372109966438, 4.8394144903828, 5.79383105522973, 6.66449205783619, 7.36540280606649, 7.82085387950918, 7.97884560802865, 7.82085387950907, 7.36540280606649, 6.6644920578359, 5.79383105522973, 4.8394144903828, 3.88372109966405, 2.99454931271487, 2.21841669358898, 1.57900316601789, 1.0798193302637, 0.709491856924646, 0.447890605896837, 0.271659384673726, 0.158309031659594, 0.0886369682387488, 0.0476817640292964, 0.0246443833694575, 0.0122380386022757, 0.00583893851582864, 0.00267660451529786, 0.00117886135513071, 0.000498849425800965, 0.000202817041309727, 7.92259818206263e-05, 2.9734390294686e-05, 1.07220706893935e-05, 3.71472368911076e-06, 1.23652410003301e-06, 3.95463928124933e-07, 1.21517656996455e-07, 3.58756781592716e-08, 1.01762805632897e-08, 2.77335998832995e-09, 7.26192300358372e-10, 1.82694408167256e-10, 4.41597992627465e-11, 1.02555072735918e-11, 2.28831298036062e-12, 4.90571057139242e-13, 1.01045421670703e-13, 1.99967574969938e-14, 3.80216307581484e-15, 6.94592549713273e-16, 1.21915162591222e-16, 2.05595471433405e-17, 3.33117606475931e-18, 5.18572940219842e-19, 7.75622386349327e-20, 1.11460000454371e-20, 1.53891972534128e-21, 2.04146111886056e-22, 2.60192323984807e-23, 3.18622226540116e-24, 3.74874480468431e-25, 4.23763850701804e-26, 4.60246141769393e-27, 4.80269080001678e-28, 4.81512226367654e-29, 4.63829355451241e-30, 4.29276747132466e-31, 3.81719826927412e-32, 3.26122146967852e-33, 2.67697359850923e-34, 2.11123270049027e-35, 1.59976555140048e-36, 1.16467511994726e-37, 8.14669535505198e-39, 5.47502838471098e-40, 3.5352448205058e-41, 2.19321311877838e-42, 1.30728535506341e-43, 7.48666115976486e-45, 4.11940204481734e-46, 2.17775191065418e-47, 1.10614190996888e-48, 5.39810728877399e-50, 2.53104809320987e-51, 1.14021697818784e-52, 4.93517810313255e-54, 2.05232614558334e-55, 8.20008107166039e-57, 3.14787975955296e-58, 1.16103776130507e-59, 4.11436460605744e-61, 1.40083642686304e-62, 4.58247704739973e-64, 1.44026163054328e-65, 4.34921326859992e-67, 1.26185147112051e-68, 3.51749908518751e-70, 9.42080400617952e-72, 2.42420958981418e-73, 5.99350099634653e-75, 1.42370240784711e-76, 3.24927207354809e-78, 7.12493910800046e-80, 1.50108213728961e-81, 3.03847716959186e-83, 5.90929564931365e-85, 1.10418967243195e-86, 1.98234784757195e-88, 3.41935559160616e-90, 5.66678703028498e-92, 9.02314083909948e-94, 1.38040588402503e-95, 2.02900953617451e-97, 2.86542862629871e-99, 3.88797374111576e-101, 5.06856793303245e-103, 6.34856310564655e-105, 7.64000830876451e-107, 8.83365515851516e-109, 9.81330445760591e-111, 1.04741388109452e-112, 1.07411207300307e-114, 1.0583007202168e-116, 1.00183639776279e-118, 9.11197964822584e-121, 7.96263661950199e-123, 6.6854288835912e-125, 5.39299317374779e-127, 4.17983067181104e-129, 3.11254563200686e-131, 2.22690139124938e-133, 1.53078594728388e-135, 1.01101166750722e-137, 6.41543470441898e-140, 3.9113279500425e-142, 2.29113454984695e-144, 1.28945199427909e-146, 6.97249132580699e-149, 3.62242170861341e-151, 1.80816581289589e-153, 8.67172946143591e-156, 3.99577851833349e-158, 1.76898974729363e-160, 7.52449650211346e-163, 3.07508973936937e-165, 1.20744223918216e-167, 4.55515495746788e-170, 1.65108019165656e-172, 5.74991466774143e-175, 1.9239015861692e-177, 6.18489778402375e-180, 1.91033890839055e-182, 5.66913157280987e-185, 1.61640755832389e-187, 4.42805931067358e-190, 1.1654783402127e-192, 2.9472922697571e-195, 7.16094641547308e-198, 1.67165196678491e-200, 3.74929423451324e-203, 8.07944269790951e-206, 1.67279032117056e-208, 3.32759014587273e-211, 6.35984267922332e-214, 1.16786094929986e-216, 2.0604596851638e-219, 3.49273251351438e-222, 5.68846058459019e-225, 8.90127872150402e-228, 1.33825312975438e-230, 1.93309125470647e-233, 2.6828393346951e-236, 3.5773809909959e-239, 4.58314867209108e-242, 5.64145225220657e-245, 6.67184746524758e-248, 7.5810528001894e-251, 8.27639395486362e-254, 8.68122493116349e-257, 8.74881199193118e-260, 8.47120866305882e-263, 7.88079255427205e-266, 7.04405328885435e-269, 6.04927865726448e-272, 4.99128960231074e-275, 3.95685529630874e-278, 3.01380943523925e-281, 2.20551303475037e-284, 1.55071393737006e-287, 1.04756739392579e-290, 6.79924162752622e-294, 4.24001310304475e-297, 2.54040022766244e-300, 1.46239706909986e-303, 8.08828961870339e-307, 4.29809786778964e-310, 2.19444210413816e-313, 1.07646593078779e-316, 5.07356011714376e-320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0";
        String[] initialValuesStrArray = initialValuesStr.split(", ");
        double[] initialValues = new double[initialValuesStrArray.length];
        for (int i=0; i<initialValues.length; i++) {
            initialValues[i] = Double.parseDouble(initialValuesStrArray[i]); // D's
        } // getting initial values

        for (int i=0; i<esDs[0].length/2; i++) {
            esDs[0][i] = scratch[0][i] = 0.0;
            esDs[1][i] = scratch[1][i] = initialValues[i];

        }

        propagateEandDinXQuaLike(esDs, scratch, fY, nXbins, nLeftFlankBins, nRightFlankBins, nDimensionsE, nDimensionsD, fftForEandD);

        double[] expectedEs = new double[8192];
        double[] expectedDsFirst48 = new double[] { 0, 0, 0, 0, 0, 1.11022302462516e-16, 0, 8.32667268468867e-17, 0, 1.38777878078145e-16, 3.46944695195361e-17, 3.46944695195361e-17, 6.93889390390723e-17, 9.36750677027476e-17, 9.54097911787244e-17, 4.33680868994202e-17, 7.89299181569447e-17, 7.88214979396962e-17, 0, 0, 2.81181057170538e-17, 0, 3.0465657530369e-18, 1.259640695312e-16, 0, 0, 0, 0, 0, 0, 0, 0, 4.0355134457755e-17, 3.12301577048253e-17, 6.55884080838606e-17, 2.91817144010091e-17, 0, 4.28408088897544e-17, 0, 4.61700718889374e-17, 3.56363701568829e-17, 3.91532509538828e-17, 7.02834058313728e-17, 4.43438688546571e-17, 0, 5.26922255827955e-17, 4.46691295064028e-17, 3.03576608295941e-18 };
        double[] expectedDsLast48 = new double[] { 4.01024466275727e-18, 4.03692777680313e-18, 1.05349692261114e-16, 5.02042488979581e-17, 2.39443578005289e-18, 0, 6.6119663477603e-17, 1.00144116158942e-16, 0, 0, 1.93444933680503e-17, 1.37819341184318e-17, 0, 0, 4.30475908080028e-17, 8.53335931173056e-17, 0, 8.7890679705948e-17, 0, 5.47860910284081e-17, 0, 7.38341679462629e-17, 0, 7.58941520739853e-18, 1.17093834628434e-17, 3.46944695195361e-18, 0, 0, 0, 8.32667268468867e-17, 2.77555756156289e-17, 5.55111512312578e-17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        };

        assertArrayEquals(expectedEs, esDs[0], EPSILON2);
        assertArrayEquals(expectedDsFirst48, Arrays.copyOfRange(esDs[1], 0, 48), EPSILON2);
        assertArrayEquals(expectedDsLast48, Arrays.copyOfRange(esDs[1], 4048, 4096), EPSILON2);
    }
}
